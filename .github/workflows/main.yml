name: "Nidum.ai Multi-Platform Build and Release"
on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Install dependencies
        run: npm install  # Use npm install instead of npm ci to avoid lockfile dependency

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Build Electron App for ${{ matrix.os }}
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            npm run build -- --mac || { echo "Mac build failed"; exit 1; }
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            npm run build -- --win || { echo "Windows build failed"; exit 1; }
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            npm run build -- --linux || { echo "Linux build failed"; exit 1; }
          fi
          DIST_PATH="./dist/${{ matrix.os }}"
          mkdir -p "$DIST_PATH"
          mv dist/* "$DIST_PATH"
        shell: bash

      - name: Check if Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "v${{ env.VERSION }}" > /dev/null 2>&1; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Locate Built Files
        id: locate_files
        run: |
          DIST_PATH="./dist/${{ matrix.os }}"
          APP_FILES=$(find "$DIST_PATH" -name "*.*" -type f)
          if [ -z "$APP_FILES" ]; then
            echo "Error: No files found in $DIST_PATH for ${matrix.os}."
            exit 1
          fi
          echo "APP_FILES=$APP_FILES" >> $GITHUB_ENV
        shell: bash

      - name: Upload Build Files to Release
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ env.RELEASE_EXISTS }}" = "true" ]; then
            echo "Updating existing release for version v${{ env.VERSION }}"
            gh release upload "v${{ env.VERSION }}" ${{ env.APP_FILES }} --clobber
          else
            echo "Creating new release for version v${{ env.VERSION }}"
            gh release create "v${{ env.VERSION }}" ${{ env.APP_FILES }} \
              --title "Release v${{ env.VERSION }}" \
              --generate-notes
          fi
